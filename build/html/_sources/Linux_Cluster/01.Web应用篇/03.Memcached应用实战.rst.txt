.. contents::
   :depth: 3
..

03.Memcached应用实战
====================

Memcached是一套分布式内存对象缓存系统，用于在动态系统中减少数据库负载，进而提升系统性能。
Memcached在很多时候都作为数据库的前端cache使用，因为它比数据库少了很多
SQL解析、磁盘操作等开销，而且使用内存来管理数据，所以它可以提供比直接读取
数据库更好的性能。另外，Memcached也经常作为服务器之间数据共享的存储媒
介。

Memcached基础
-------------

Memcached是一个免费开源的、高性能的、具有分布式内存对象的缓存系统，它通
过减轻数据库负载加速动态Web应用。

缓存一般用来保存一些经常存取的对象或数据（例如，浏览器会把经常访问的网页
缓存起来），通过缓存来存取对象或数据要比磁盘存取快很多。Memcache是一种内
存缓存，把经常存取的对象或数据缓存在内存中，内存中缓存的这些数据通过API的
方式被存取，数据就像一张大的HASH表，以key-value对的方式存在。Memcache通
过缓存经常被存取的对象或数据，来减轻数据库的压力，提高网站的响应速度，构
建速度更快的可扩展的Web应用。

下图展示了Memcache和数据库协作的流程。

这个流程的具体逻辑如下：

::

    1）检查客户端请求的数据是否在Memcache中存在，如果存在，直接把请求的数据
    返回，不再对数据进行任何操作。

    2）如果请求的数据不在Memcache中，就去查询数据库，把从数据库中获取的数据
    返回给客户端，同时把数据缓存一份到Memcache中。

    3）每次更新数据库（如更新、删除数据库的数据）的同时更新Memcache中的数
    据，保证Memcache中的数据和数据库中的数据一致。

    4）当分配给Memcache内存空间用完之后，会使用LRU（Least Recently Used，
    最近最少使用）策略加到期失效策略，失效的数据首先被替换掉，然后再替换掉最
    近未使用的数据。

.. figure:: ../../_static/memache0001.PNG
   :alt: 

Memcached的特征
---------------

1.协议简单

::

    Memcached的协议实现比较简单，使用的是基于文本行的协议，能直接通过telnet
    在Memcached服务器上存取数据。

2.基于libevent的事件处理

::

    了解libevent的用户都知道，libevent是一套利用C开发的程序库，它将BSD系统
    的kqueue、Linux系统的epoll等事件处理功能封装成一个接口，确保即使服务器端
    的连接数增加也能发挥很好的性能。Memcached利用这个库进行异步事件处理。

3.内置的内存管理方式

::

    Memcached有一套自己管理内存的方式，这套管理方式非常高效，所有的数据都保
    存在Memcached内置的内存中，当存入的数据占满空间时，使用LRU算法自动删除不
    使用的缓存，即重用过期数据的内存空间。Memcached是为缓存系统设计的，没有
    考虑数据的容灾问题，和机器的内存一样，重启机器数据将会丢失。

4.互不通信的Memcached之间具有分布特征

::

    各个Memcached服务器之间互相不通信，都是独立的存取数据，不共享任何信息。
    通过对客户端的设计，让Memcached具有分布式，能支持海量缓存和大规模应用。

Memcached的安装
---------------

省略，网上度

剖析Memcached的工作原理
-----------------------

Memcached的工作过程
~~~~~~~~~~~~~~~~~~~

Memcached是一种C/S模式，在服务器端启动服务守护进程，此时可以指定监听的IP
地址、端口号以及使用多少内存来处理客户端的请求等几个关键参数。服务器端的
服务启动后就一直处于等待处理客户端的连接状态。Memcached是由C语言来实现
的，采用的是\ ``异步I/O``\ ，其实现方式是基于\ ``事件的单进程和单线程``\ 的。使用
``libevent``\ 作为事件通知机制，多个服务器端可以协同工作，但这些服务器端之间没
有任何通信关系，每个服务器端只对自己的数据进行管理。客户端通过指定服务器
的IP地址和端口进行通信。

::

    需要被缓存的对象或数据以key/value对的形式保存在服务器端，每个被缓存的对
    象或数据都有唯一的标识符key，存取操作通过这个key进行。保存到Memcached中
    的对象或数据放置在内存中，并不会作为文件存储在磁盘上，所以存取速度非常
    快。由于没有对这些对象进行持久性存储，因此在服务器端的服务重启之后存储在
    内存中的这些数据就会消失。而且当存储的容量达到启动时设定的值时，就自动使
    用LRU算法删除不用的缓存。Memcached是为缓存而设计的服务器，因此在设计之初
    并没有过多考虑数据的永久性问题。Memcached支持各种语言编写的客户端API，目
    前包括Perl、PHP、Python、Ruby、Java、C#和C等。

通过UDFs实现Memcached与MySQL的自动更新
--------------------------------------

UDFs使用简介

::

    UDFs是User Defined Functions的缩写，表示MySQL的用户定义函数，应用程序
    可以利用这些函数从MySQL5.0以上版本的数据库中访问Memcached写入或者获取的
    数据。此外，MySQL从5.1版本开始支持触发器，从而可以在触发器中使用UDFs直接
    更新Memcached的内容，这种方式降低了应用程序设计和编写的复杂性。

即当Mysql数据表中发生变化后，里面将数据信息同步更新到Memcached中，这样就便于客户端高速访问。

因为市面上主流的缓存服务器为Redis和MongoDB，所以在Memcached这里就不多做停留了。
Memcached掉电就丢失了。
